____________________________

# Introduction to Redis
____________________________

Redis is an in-memory data structure store often used as a database, cache, and message broker.
It's known for its speed and versatility, supporting various data structures like :
strings, lists, sets, sorted sets, and hashes.

1. Redis Overview

Redis (Remote Dictionary Server) operates primarily in memory, 
making it exceptionally fast for read and write operations.
It's designed to store key-value pairs where .

# Database (DB):
Think of a Redis database as a large table where each row has two columns: 
a key and its associated value.

+----------------------------------+
|              Redis DB            |
+----------------------------------+
| Key1 | Value1                    |
| Key2 | Value2                    |
| Key3 | Value3                    |
+----------------------------------+

Commands:

    SET key value: Stores the value with the specified key.
    GET key: Retrieves the value stored at the key.
    DEL key: Deletes the key-value pair.


3. Key-Value Storage


In Redis, everything is centered around keys and their corresponding values:

    Key: A string identifier (e.g., "user:1001").
    Value: Can be simple (like a string) or complex (like a list or hash).


Step 2: Python Code

Hereâ€™s a basic example of how to interact with Redis using Python:

________________________________________________________

import redis

# Step 3: Connect to Redis server
client = redis.Redis(host='localhost', port=6379, db=0)

# Step 4: Set key-value pairs
client.set('user:1001', 'John Doe')
client.set('user:1002', 'Jane Doe')

# Step 5: Get values by keys
user_1001 = client.get('user:1001').decode('utf-8')
user_1002 = client.get('user:1002').decode('utf-8')

print(f"User 1001: {user_1001}")
print(f"User 1002: {user_1002}")

# Step 6: Store complex data structures
client.hset('user:1001:profile', mapping={'age': 30, 'city': 'New York'})

# Retrieve the hash
profile = client.hgetall('user:1001:profile')
print(f"User 1001 Profile: {profile}")

________________________________________________________


Connection: 

    - We connect to the Redis server running on localhost at the default port 6379.

Set Key-Value Pairs:

    - We store the user's names using SET key value.

Get Values:

    - We retrieve the values associated with the keys using GET key.

Store Complex Structures:

    - We use a hash (HSET) to store more complex data like a user's profile (age, city).

Retrieve Hash:

    - HGETALL retrieves all fields and values in the hash.


# in Redis, caching is one of the most common use cases. 
A cache is a temporary storage area that holds copies of data from the most frequently accessed 
and computationally expensive operations, allowing faster access on subsequent requests.


# Caching with Redis

When you use Redis as a cache, you typically store the result of expensive operations 
(like database queries, complex computations, or API calls) in Redis.
The next time you need that data, you can retrieve it from Redis
much faster than recomputing or re-fetching it.

# How Redis Cache Works

    Check Cache First:
        Before performing a costly operation, check if the result is already in the Redis cache.
        If the data is present (a cache hit), return it immediately.


1 . Compute and Cache:

    If the data isn't in the cache (a cache miss), perform the operation (e.g., query the database).
    Store the result in Redis so that subsequent requests can get it from the cache.

2 . Expiration Policy:

    Cache entries typically have an expiration time (TTL - Time To Live)
    after which they are automatically deleted.
    This helps ensure that stale data doesn't persist in the cache.

Cache Hit:

+----------+          +----------+
|  Client  | ---->    |  Redis   |
+----------+          +----------+
        |                  |
        |   Data Found     |
        |<-----------------|


Cache Miss:

+----------+          +----------+          +---------+
|  Client  | ---->    |  Redis   |  ---->   | Database|
+----------+          +----------+          +---------+
        |                  |                    |
        |     Data Not Found                    |
        |<--------------------------------------|
        |                  |
        |     Query Database (Expensive)        |
        |------------------------------------>  |
        |                  |                    |
        |      Data Retrieved                   |
        |<--------------------------------------|
        |                  |
        |    Store Data in Redis                |
        |------------------------------------>  |
        |                  |
        |     Return Data to Client             |
        |<--------------------------------------|



# Live Python Example

________________________________________________________

import redis
import time

# Connect to Redis server
client = redis.Redis(host='localhost', port=6379, db=0)

def expensive_operation():
    # Simulating a time-consuming operation (like a DB query)
    time.sleep(2)
    return "Result of expensive operation"

def get_data():
    # Try to get data from Redis cache
    cache_key = 'expensive_result'
    cached_result = client.get(cache_key)
    
    if cached_result:
        # Cache hit
        print("Cache hit")
        return cached_result.decode('utf-8')
    else:
        # Cache miss
        print("Cache miss")
        result = expensive_operation()
        # Store result in Redis with an expiration time (e.g., 10 seconds)
        client.setex(cache_key, 10, result)
        return result

# Fetch data (will be slow the first time, then fast due to caching)
print(get_data())  # First call: Cache miss, slow
print(get_data())  # Second call: Cache hit, fast


1 . Expensive Operation:

    expensive_operation() simulates a time-consuming task.

2 . Cache Lookup:

    get_data() checks if the result is in Redis using client.get(). 
    If found, itâ€™s returned immediately (cache hit).

3 . Cache Miss Handling:

    If the data is not in the cache (cache miss), it performs the expensive operation.
    stores the result in Redis with a TTL of 10 seconds (client.setex()), and returns the result.

4 . Re-use Cached Data:

    On subsequent calls within the expiration time, the data is returned from Redis instantly.
    demonstrating the speed of caching.
